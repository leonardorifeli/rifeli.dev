---
title: "Por que priorizar o fetch nativo? E como implementar timeout nas requisi√ß√µes"
draft: false
date: 2025-08-20T00:00:00.000Z
description: "Entenda por que o fetch nativo deve ser sua primeira escolha no Node.js e veja como implementar timeout de forma simples e eficiente."
comments: true
keywords: [
  "Node.js",
  "fetch",
  "timeout",
  "AbortController",
  "AbortSignal",
  "JavaScript",
  "backend",
  "HTTP requests",
  "resili√™ncia",
  "boas pr√°ticas",
  "uso de fetch em nodejs",
  "como implementar timeout em nodejs",
  "como implementar timeout em fetch nodejs"
]
tags:
  - nodejs
  - fetch
  - timeout
  - c√≥digo
  - nativo
---

# Introdu√ß√£o

<img id="image-custom" src="https://nodejs.org/static/logos/nodejsDark.svg" alt="" />
<p id="image-legend">Node.js</p>

Na Harmo, nosso codebase √© bastante diverso. Sempre buscamos equil√≠brio entre as linguagens, usando cada uma para aquilo que faz de melhor. Come√ßamos nosso core em **Node.js** e, desde 2017, evolu√≠mos muito com **Golang** (desde a vers√£o 1.7). Hoje, tamb√©m contamos com Python, Vue.js e at√© shell scripts para infra.

No ecossistema **Node.js** √© comum haver m√∫ltiplas formas de resolver o mesmo problema. Por isso, adotamos uma diretriz clara: **sempre priorizar o que √© nativo**, evitando depend√™ncias externas desnecess√°rias. Quando precisamos de algo mais espec√≠fico, criamos pacotes privados que abstraem essa l√≥gica, garantindo reaproveitamento e seguran√ßa.

Dessa forma, para gerir os clients back-end que fazem requisi√ß√µes HTTPS (internas e externas), usamos desde o Node v18 o **fetch** nativo. Por√©m, ele n√£o possui uma forma "oficial‚Äù de configurar timeout. Vamos ver como contornar isso.

<img id="image-custom" src="/images/posts/nodejs-fetch/distribuicao_tecnologias.png" alt="" />
<p id="image-legend">Distribui√ß√£o das linguagens no codebase da Harmo</p>

# Por que usar fetch nativo?

A primeira pergunta que sempre aparece √©: *"Por que usar algo nativo e contornar essa limita√ß√£o, se eu posso importar o Axios e setar `timeout` facilmente?‚Äù*.

### Pontos que pesam a favor do fetch:

- **Livre de depend√™ncias externas**: menos pacotes para atualizar, menos riscos de vulnerabilidades.
- **Ado√ß√£o e padroniza√ß√£o**: hoje √© API est√°vel, padronizada e suportada oficialmente no Node 18+.
- **API moderna**: suporta streaming, trabalha com Promises e se alinha ao padr√£o da Web.

### Comparativo mais amplo ‚Äî fetch vs Axios

1. **Zero depend√™ncias, menos superf√≠cie de risco**
   - Nada de instalar libs s√≥ para HTTP.
   - Menos c√≥digo de terceiros no deploy, menos CVEs para monitorar.

2. **Padr√£o da Web (WHATWG) e futuro-proof**
   - Mesma API usada em navegadores, Deno, Bun, runtimes serverless/edge.
   - Isom√≥rfico: o mesmo c√≥digo funciona em front e back.

3. **Dispon√≠vel nativamente no Node 18+**
   - J√° faz parte do runtime, baseado em *undici*.
   - Suporte a `AbortController` e `AbortSignal.timeout(ms)`.

4. **API moderna e compos√°vel**
   - `Request`, `Response`, `Headers` padronizados.
   - Composi√ß√£o simples via fun√ß√µes, sem precisar de interceptors acoplados.

5. **Performance e simplicidade operacional**
   - Menos camadas ‚áí overhead menor.
   - Tree-shaking natural: usa a API do runtime, n√£o importa um bundle extra.

---

# E quando faz sentido usar Axios (ou outra lib)?

N√£o √© sobre "nunca usar Axios‚Äù, mas sim **come√ßar com fetch** e s√≥ adicionar uma lib se o caso justificar.

**Exemplos em que pode valer a pena:**

- Interceptors prontos para logging, m√©tricas ou autentica√ß√£o.
- Retries/backoff j√° implementados.
- Serializa√ß√£o autom√°tica de `params` e normaliza√ß√£o de erros.
- Ambientes legados (Node < 18).
- Ergonomia de configura√ß√£o (`axios.create`, defaults globais, etc.).

---

# Problema de Timeout e helpers

O **fetch** n√£o tem uma op√ß√£o `timeout` nativa no objeto de configura√ß√£o.
Se voc√™ n√£o tratar isso, uma requisi√ß√£o pode ficar pendurada indefinidamente, travando fluxo e degradando UX.

### Solu√ß√£o 1: AbortController + setTimeout

```js
async function fetchWithTimeout(url, options = {}, timeout = 5000) {
  const controller = new AbortController();
  const timer = setTimeout(() => controller.abort(), timeout);

  try {
    return await fetch(url, { ...options, signal: controller.signal });
  } finally {
    clearTimeout(timer);
  }
}
```

### Solu√ß√£o 2: AbortSignal.timeout (mais moderna)

```js
const response = await fetch("https://api.exemplo.com", {
  signal: AbortSignal.timeout(3000),
});
```

# Conclus√£o

Como trabalhamos com microsservi√ßos e serverless, estamos sempre atualizando nosso codebase e priorizando recursos nativos.

- **O fetch nativo deve ser sempre a primeira escolha:** leve, padronizado e futuro-proof;
- **Timeout n√£o √© um problema:** com AbortController ou AbortSignal.timeout, voc√™ cobre 99% dos cen√°rios;
- Axios e outras libs ainda t√™m espa√ßo, mas s√≥ quando h√° uma necessidade clara (interceptors complexos, retrys prontos, ergonomia global).

# Li√ß√µes aprendidas

Interessante refletir e analisar cada caso, mas o que sempre buscamos ter aqui √© o b√°sico bem feito.

- **Comece simples:** fetch nativo atende a maioria dos casos;
- **Priorize o controle:** implemente timeout sempre, mesmo em chamadas internas;
- **Reduza depend√™ncias:** cada pacote a menos significa menos riscos, menos manuten√ß√£o e menos bugs;
- **Crie seus utilit√°rios:** pequenos helpers (fetchJson, fetchWithRetry) podem substituir dezenas de linhas de configs em libs externas;
- **Padronize no time:** uma decis√£o simples como **‚Äúusar fetch nativo com helper padr√£o‚Äù** j√° elimina inconsist√™ncias e acelera onboarding de devs.

**üí¨ E voc√™, como lida com requisi√ß√µes no Node.js?**

Prefere ficar s√≥ no fetch nativo ou ainda v√™ valor em libs como Axios?
Deixa sua experi√™ncia nos coment√°rios, quero muito ouvir como outros times t√™m tratado esse tema no dia a dia.